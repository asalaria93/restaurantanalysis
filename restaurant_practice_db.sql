-- 1/ Write an SQL query to find the top 5 most-ordered dishes from a given restaurant.

select restaurant_name, dish_name, sum(order_value) as total from order_details
where restaurant_name = 'restaurant_1'
group by restaurant_name, dish_name
order by total desc
limit 5
;

-- or

select * from 
(select restaurant_name, dish_name, sum(order_value) as total, Row_number() OVER (partition by restaurant_name order by sum(order_value) desc) as ranking from order_details
where restaurant_name = 'restaurant_1'
group by restaurant_name, dish_name) as famous_dishes
where ranking <=5
;

-- 2/ Retrieve all orders placed in the specific date for a specific user.

select order_id, customer_id, dish_name, order_date from orders
where customer_id = '195' and 
order_date BETWEEN '2024-09-09' and '2024-10-19'
;

-- 3/ Find the total revenue generated by all restaurants in the for a specific month.
WITH Date_month AS (
select * from order_details
where order_date BETWEEN '2024-09-01' and '2024-10-31'
)
select sum(order_value) as total_rev
from Date_month 
;

-- 4/ Retrieve the top 10 restaurants with the highest average customer rating.

select restaurant_name, average_rating, ranking from (
select restaurant_name, average_rating, Dense_rank() OVER (order by average_rating desc) as ranking
from order_details
group by restaurant_name, average_rating
order by average_rating desc) as restaurant_ranking
where ranking <= 10
;


-- 5/ List all customers who have ordered at least one dish from more than 3 different restaurants.
/* What this Query Does:
This query retrieves all customers who have:
Ordered from more than 3 different restaurants (dist_res > 3).
*/


select customer_id, count(distinct restaurant_id) as dist_res from orders
group by customer_id
having dist_res>3 
order by dist_res desc
;

-- 6/ List all customers who have ordered at least 2 dish from more than 3 different restaurants.
 /* What this Query Does:
Thi query retrieves all customers who have:
Ordered from more than 3 different restaurants (dist_res > 3).
Ordered at least 2 different dishes (dis_dish > 2).*/

select customer_id, count(distinct dish_name) as dis_dish, count(distinct restaurant_id) as dist_res from orders
group by customer_id
having dist_res>3 and dis_dish>2
order by dist_res desc
;

-- 7/ Identify restaurants where the average order value is higher than the overall average order value across all restaurants.
/*What This Query Does Now
Computes total revenue per restaurant (Total_value).
Computes overall average order value (total_avg).
Filters restaurants with above-average revenue (res_avg).
Displays restaurants with their revenue and the global average.*/


WITH Total_value as( 
select restaurant_id, sum(order_value) as total_value, count(dish_name) as dish_count from orders 
group by restaurant_id
), 

total_avg as (
select avg(order_value) as total_avg from orders
), 

res_avg as (
Select restaurant_id, total_value/dish_count as res_avg
from total_value
group by restaurant_id
having avg(total_value) >= (select avg(order_value) as total_avg from orders)
)
Select ra.restaurant_id, ra.res_avg,  ta.total_avg, 
CASE
when res_avg > total_avg then 'high_avg_orders'
else 'low_avg_orders'
end as High_value_restaurant
from res_avg ra
join total_avg ta 
;

-- 8/ Group orders by cuisine type and calculate the total revenue for each cuisine
select cuisine_type, sum(order_value) as total_rev  from Order_details
group by cuisine_type 
;


-- 9/ Find the rank of each restaurant based on total revenue within each city.

select restaurant_id, city, sum(order_value) as total_rev, dense_rank() OVER (order by sum(order_value) desc) as ranking from order_details
group by restaurant_id, city
;

-- 10/ Categorize restaurants into "High Revenue," "Medium Revenue," and "Low Revenue" based on their monthly sales.

With 	revbyres as(
select restaurant_name, sum(order_value) as revby_res 
from order_details
group by restaurant_name
), 			stddev as (
select avg(revby_res) as res_avg, 
stddev(revby_res) as std_dev 
from revbyres
)
select rbr.restaurant_name, rbr.revby_res, sd.res_avg, sd.std_dev, 
case 
when rbr.revby_res >= (sd.res_avg+sd.std_dev) then 'High Revenue'
when rbr.revby_res <= (sd.res_avg-sd.std_dev) then 'Low Revenue'
else 'Mid Revenue'
end as Restaurat_revenue
from revbyres rbr
join stddev sd
order by revby_res desc
;




